# app.py ‚Äì versi√≥n completa, corregida y lista para pegar
# Funcionalidades:
# - Confirmaci√≥n + limpieza de formularios (clear_on_submit) y toasts
# - Autocompletado mejorado (buscador + ranking de coincidencias)
# - Alta r√°pida de clientes (agrega a hoja CLIENTES con el asesor logueado)
# - Mini panel ‚ÄúLo cargado‚Äù (Solo hoy / √öltimos 30) + buscador + deduplicado
# - Filtro por ASESOR para que cada uno vea solo lo suyo (y alerta de duplicado por asesor)
# - Selector de pr√≥ximo contacto que aparece al marcar "S√≠"

import streamlit as st
import pandas as pd
from datetime import datetime
from typing import Optional
import difflib

# === IMPORTS de conectores a Drive con *fallback* seguro ===
try:
    import drive_utils as drive_local
except Exception as e:
    drive_local = None
    st.warning(f"‚ö†Ô∏è No se pudo importar drive_utils (Local). Motivo: {e}")

try:
    import drive_utils_internacional as drive_int
except Exception as e:
    drive_int = None
    st.warning(f"‚ö†Ô∏è No se pudo importar drive_utils_internacional. Motivo: {e}")

# Si no se pudieron importar, defino *stubs* para que la app arranque igual
if drive_local is None and drive_int is None:
    st.info("üöß Modo sin conectores: se usar√°n funciones de prueba (no escriben en Drive).")

    def _stub_obtener_hoja_clientes():
        # hoja m√≠nima para que cargue el combo de clientes
        return pd.DataFrame({"CLIENTE": ["CLIENTE DEMO 1", "CLIENTE DEMO 2"]})

    def _stub_procesar_contacto(*args, **kwargs):
        st.toast("(Demo) Contacto procesado localmente")

    def _stub_marcar_contacto_como_hecho(*args, **kwargs):
        st.toast("(Demo) Recordatorio marcado como hecho")

    def _stub_obtener_recordatorios_pendientes(*args, **kwargs):
        return []

    def _stub_agregar_cliente_si_no_existe(*args, **kwargs):
        st.toast("(Demo) Cliente agregado localmente")

    # Asigno los stubs a ambas variantes para que el resto del c√≥digo funcione
    class _DL:  # dummy local/internacional
        obtener_hoja_clientes = staticmethod(_stub_obtener_hoja_clientes)
        procesar_contacto = staticmethod(_stub_procesar_contacto)
        marcar_contacto_como_hecho = staticmethod(_stub_marcar_contacto_como_hecho)
        obtener_recordatorios_pendientes = staticmethod(_stub_obtener_recordatorios_pendientes)
        agregar_cliente_si_no_existe = staticmethod(_stub_agregar_cliente_si_no_existe)

    drive_local = _DL
    drive_int = _DL

from historial import cargar_historial_completo, formatear_historial_exportable
from gestor_contactos import registrar_contacto
from utils import normalizar

# ------------------- Autenticaci√≥n simple -------------------
usuarios_autorizados = [
    "facundo@amautainversiones.com",
    "florencia@amautainversiones.com",
    "jeronimo@amautainversiones.com",
    "agustin@amautainversiones.com",
    "regina@amautainversiones.com",
    "julieta@amautainversiones.com"
]

# --- Mapeo robusto: email ‚Üí c√≥digo de hoja (seg√∫n drive_utils.mapa_asesores) ---
# ¬°Ajust√° ac√° si cambi√°s los c√≥digos en la planilla!
# En tu drive_utils (2).py los c√≥digos v√°lidos son: FA, FL, AC, RE, JC
#   FA‚ÜíFACUNDO, FL‚ÜíFLORENCIA, AC‚ÜíAGUSTIN, RE‚ÜíREGINA, JC‚ÜíJERONIMO

def codigo_asesor_from_email(email: str) -> str:
    usuario = email.split("@")[0].lower()
    mapeo = {
        "facundo":  "FA",
        "florencia": "FL",
        "agustin":  "AC",   # üëà importante: no es AG, es AC
        "regina":   "RE",
        "jeronimo": "JC",
        "julieta":  "JL",   # si tu planilla usa otro c√≥digo, cambialo
    }
    return mapeo.get(usuario, usuario[:2].upper())

if "autenticado" not in st.session_state:
    st.session_state.autenticado = False

if not st.session_state.autenticado:
    st.title("üîê Acceso restringido")
    mail_ingresado = st.text_input("üìß Ingres√° tu mail institucional", placeholder="tuusuario@amautainversiones.com")
    if st.button("Ingresar"):
        correo = mail_ingresado.strip().lower()
        if correo in usuarios_autorizados:
            st.session_state.autenticado = True
            st.session_state.mail_ingresado = correo
            st.rerun()
        else:
            st.error("‚ùå No est√°s autorizado.")
    st.stop()

# ---------------- Selecci√≥n de planilla ----------------
if st.session_state.mail_ingresado == "regina@amautainversiones.com":
    tipo_dato = st.radio("üåê ¬øCon qu√© clientes quer√©s trabajar?", ["Locales", "Internacionales"], key="origen_datos")
    st.markdown("---")
    if "tipo_dato_confirmado" not in st.session_state:
        st.session_state.tipo_dato_confirmado = False
    if st.button("Continuar"):
        st.session_state.tipo_dato_confirmado = True
    if not st.session_state.tipo_dato_confirmado:
        st.stop()
else:
    tipo_dato = "Locales" if st.session_state.mail_ingresado != "julieta@amautainversiones.com" else "Internacionales"

if tipo_dato == "Locales":
    obtener_hoja_clientes = drive_local.obtener_hoja_clientes
    procesar_contacto = drive_local.procesar_contacto
    marcar_contacto_como_hecho = drive_local.marcar_contacto_como_hecho
    obtener_recordatorios_pendientes = drive_local.obtener_recordatorios_pendientes
    agregar_cliente_si_no_existe = drive_local.agregar_cliente_si_no_existe
else:
    obtener_hoja_clientes = drive_int.obtener_hoja_clientes
    procesar_contacto = drive_int.procesar_contacto
    marcar_contacto_como_hecho = drive_int.marcar_contacto_como_hecho
    obtener_recordatorios_pendientes = drive_int.obtener_recordatorios_pendientes
    agregar_cliente_si_no_existe = drive_int.agregar_cliente_si_no_existe

# --- Identificador del asesor actual (para filtrar mini panel/alertas) ---
usuario_codigo_actual = codigo_asesor_from_email(st.session_state.mail_ingresado)
# En Locales el historial guarda el c√≥digo corto (FA, FL, AC, RE, JC, etc.).
# En Internacionales podr√≠a guardar el nombre de hoja; si cambia, mape√° ac√°.
asesor_actual = usuario_codigo_actual

# ------------------- helpers --------------------
@st.cache_data(ttl=60)
def obtener_hoja_clientes_cached():
    return obtener_hoja_clientes()

# ranking de coincidencias para el buscador

def rankear_coincidencias(query: str, universe: list[str], top_n: int = 50) -> list[str]:
    if not query:
        return universe
    q = normalizar(query)

    def score(nombre: str) -> tuple:
        n = normalizar(nombre)
        if n == q:
            return (1.0, -len(nombre))
        if n.startswith(q):
            return (0.95, -len(nombre))
        if q in n:
            return (0.90, -len(nombre))
        q_tokens = set(q.split())
        n_tokens = set(n.split())
        inter = len(q_tokens & n_tokens)
        jacc = inter / max(1, len(q_tokens | n_tokens))
        sm = difflib.SequenceMatcher(None, q, n).ratio()
        return (0.5 * sm + 0.5 * jacc, -len(nombre))

    ordenados = sorted(universe, key=score, reverse=True)
    exactos = [n for n in ordenados if normalizar(n) == q]
    if exactos:
        ordenados = exactos + [n for n in ordenados if normalizar(n) != q]
    return ordenados[:top_n]

# panel/alerta anti-duplicados

def _df_hist_sesion() -> pd.DataFrame:
    if "historial" in st.session_state and st.session_state.historial:
        return pd.DataFrame(st.session_state.historial)
    return pd.DataFrame(columns=["Cliente","Detalle","Fecha","Estado","Nota","Pr√≥ximo contacto","Asesor"])


def mostrar_alerta_posible_duplicado(cliente: str, asesor_actual: str):
    """Advierte si HOY ya cargaste algo para ese cliente.
    Si el c√≥digo del asesor no coincide con lo que hay en la planilla, NO filtra (para no ocultar registros).
    """
    hoy = datetime.now().strftime("%d/%m/%Y")
    df = pd.concat([_df_hist_sesion(), cargar_historial_completo()], ignore_index=True)
    if df.empty:
        return

    # Normalizo Asesor
    asesores_norm = df["Asesor"].astype(str).str.strip().str.upper()
    target = str(asesor_actual).strip().upper()

    # Si el target existe tal cual, filtro exacto; si no, pruebo startswith/contains; si ninguna matchea, NO filtro
    if (asesores_norm == target).any():
        df = df[asesores_norm == target]
    elif asesores_norm.str.startswith(target).any():
        df = df[asesores_norm.str.startswith(target)]
    elif asesores_norm.str.contains(target, na=False).any():
        df = df[asesores_norm.str.contains(target, na=False)]

    if not df.empty and any((df["Cliente"].str.upper() == cliente.upper()) & (df["Fecha"] == hoy)):
        st.warning("‚ö†Ô∏è Ya ten√©s un registro HOY para este cliente. Mir√° el mini panel para no duplicar.")


def render_mini_panel(
    cliente_foco: Optional[str] = None,
    asesor_actual: Optional[str] = None,
    key_prefix: str = "mini",
):
    """Panel con Solo hoy / √öltimos 30 + buscador.
    - Muestra registros por asesor con un SELECTOR visible.
    - Si el c√≥digo de asesor no coincide, pod√©s elegir manualmente cu√°l ver.
    - Saca duplicados entre sesi√≥n y CSV.
    - Usa claves √∫nicas por instancia (key_prefix) para evitar StreamlitDuplicateElementKey.
    """
    df_s = _df_hist_sesion()
    df_c = cargar_historial_completo()
    df = pd.concat([df_s, df_c], ignore_index=True)
    if df.empty:
        return

    # Dedup b√°sico
    df = df.drop_duplicates(subset=["Cliente", "Detalle", "Fecha"], keep="first")

    # --- Selector de asesor ---
    asesores_disponibles = (
        df["Asesor"].dropna().astype(str).str.strip().unique().tolist()
    )
    asesores_disponibles = sorted([a for a in asesores_disponibles if a])

    # Sugerencia de √≠ndice seg√∫n asesor_actual
    idx_def = 0
    if asesor_actual:
        target = str(asesor_actual).strip().upper()
        for i, a in enumerate(asesores_disponibles):
            au = a.strip().upper()
            if au == target or au.startswith(target) or target in au:
                idx_def = i
                break

    if asesores_disponibles:
        sel_asesor = st.selectbox(
            "üë§ Asesor a mostrar:", asesores_disponibles, index=idx_def, key=f"{key_prefix}_sel_asesor"
        )
        df = df[df["Asesor"].astype(str).str.strip() == sel_asesor]
    else:
        st.info("No hay columna 'Asesor' o est√° vac√≠a en el historial.")
        return

    # Controles del panel (con keys √∫nicas)
    modo = st.radio(
        "üßæ Qu√© ver en el panel:", ["Solo hoy", "√öltimos 30"], horizontal=True, key=f"{key_prefix}_modo"
    )
    filtro_texto = st.text_input("üîé Filtrar por cliente/motivo/nota:", key=f"{key_prefix}_busca")
    filtrar_cliente_actual = st.checkbox("üë§ Ver solo cliente actual", value=False, key=f"{key_prefix}_toggle")

    if modo == "Solo hoy":
        hoy = datetime.now().strftime("%d/%m/%Y")
        df = df[df["Fecha"] == hoy]
    else:
        df = df.tail(30)

    if filtrar_cliente_actual and cliente_foco:
        df = df[df["Cliente"].str.contains(cliente_foco, case=False, na=False)]

    if filtro_texto:
        mask = (
            df["Cliente"].str.contains(filtro_texto, case=False, na=False)
            | df["Detalle"].str.contains(filtro_texto, case=False, na=False)
            | df["Nota"].str.contains(filtro_texto, case=False, na=False)
        )
        df = df[mask]

    if df.empty:
        st.info("No hay registros para ese filtro.")
        return

    with st.expander("üßæ Lo cargado (mini panel)", expanded=True):
        st.dataframe(
            df[["Fecha", "Cliente", "Detalle", "Estado", "Nota", "Pr√≥ximo contacto", "Asesor"]].reset_index(drop=True),
            hide_index=True,
            use_container_width=True,
            height=260,
        )

# ------------------- Datos base --------------------
try:
    df_clientes = obtener_hoja_clientes_cached()
except Exception:
    st.error("‚ùå No se pudo acceder a la hoja de clientes. Esper√° unos segundos e intent√° de nuevo.")
    st.stop()

nombres = sorted(df_clientes["CLIENTE"].dropna().unique())

# ---------------- Alta r√°pida de CLIENTE ----------------
usuario_codigo = usuario_codigo_actual  # reuso
with st.container(border=True):
    st.markdown("**‚ûï Alta r√°pida**: escrib√≠ un cliente nuevo y guardalo directo en la hoja *CLIENTES*. Queda asignado a tu usuario.")
    cols = st.columns([3, 1])
    nuevo_cliente = cols[0].text_input("üë§ Cliente (pod√©s escribir libremente):", value="", key="cliente_libre")
    agregar = cols[1].button("Guardar", key="btn_alta_cliente", use_container_width=True, disabled=not nuevo_cliente.strip())
    if agregar:
        try:
            agregar_cliente_si_no_existe(nuevo_cliente.strip(), usuario_codigo)
            st.toast("‚úÖ Cliente agregado a la hoja CLIENTES")
            st.cache_data.clear()
        except Exception as e:
            st.error(f"‚ö†Ô∏è No se pudo agregar: {e}")

# ---------------- Pesta√±as ----------------
tabs = st.tabs(["üìû Cargar Contactos", "üìÖ Recordatorios Pendientes"])

with tabs[0]:
    st.title("üìã Registro de Contactos Comerciales")

    modo_carga = st.radio(
        "üîÄ ¬øC√≥mo quer√©s cargar el contacto?",
        ["Carga guiada", "Carga m√∫ltiple"],
        horizontal=True,
    )

    if modo_carga == "Carga guiada":
        q = st.text_input("üîé Busc√° el cliente por nombre o parte del nombre:")
        opciones = rankear_coincidencias(q, nombres, top_n=40) if q else nombres
        cliente_seleccionado = st.selectbox("üë§ Cliente:", opciones, key="cg_cliente")

        # Alerta anti-duplicado (por asesor)
        mostrar_alerta_posible_duplicado(cliente_seleccionado, asesor_actual)

        # Radio fuera del form para que el date picker aparezca al instante
        agendar = st.radio("üìÖ Pr√≥ximo contacto?", ["No", "S√≠"], key="up_agenda")

        with st.form("form_guiada", clear_on_submit=True):
            fecha_contacto = st.date_input("üìÖ Fecha del contacto:", format="YYYY/MM/DD", key="cg_fecha")
            tipo_contacto = st.selectbox("üìû Tipo de contacto:", ["LLAMADA", "MENSAJES", "REUNION", "OTRO"], key="cg_tipo")
            motivo_contacto = st.text_input("üìù Motivo:", placeholder="Ej: revisi√≥n de cartera", key="cg_motivo")
            estado = st.selectbox("üìå Estado:", ["En curso", "Hecho", "REUNION", "Respuesta positiva"], key="up_estado")

            proximo = ""
            if agendar == "S√≠":
                proximo = st.date_input("üóìÔ∏è Fecha:", format="YYYY/MM/DD", key="up_prox").strftime("%d/%m/%Y")
            nota = st.text_input("üóíÔ∏è Nota:", key="up_nota")
            submitted = st.form_submit_button("Actualizar contacto", use_container_width=True)

        if submitted:
            try:
                frase = f"Se realiz√≥ una {tipo_contacto.lower()} con {cliente_seleccionado} el {fecha_contacto.strftime('%d/%m/%Y')} por {motivo_contacto.strip().lower()}"
                registrar_contacto(frase, estado, nota, proximo, df_clientes, procesar_contacto, tipo_contacto)
                st.success("‚úÖ Contacto actualizado correctamente.")
                st.toast("Guardado ‚úîÔ∏è ‚Äì formulario limpio para seguir cargando")
                st.cache_data.clear()
                st.rerun()
            except Exception as e:
                st.error(f"‚ö†Ô∏è {e}")

        # Mini panel filtrado por el asesor actual (y opcional por cliente)
        render_mini_panel(cliente_seleccionado, asesor_actual, key_prefix="panel_guiada")
    elif modo_carga == "Carga m√∫ltiple":
        st.subheader("üì• Carga m√∫ltiple (sin escribir)")
        st.caption("Eleg√≠ la cantidad de contactos, complet√° cada fila con men√∫s y listo. La fecha se toma **hoy** autom√°ticamente.")

        # Configuraci√≥n global de la tanda
        hoy_str = datetime.today().strftime("%d/%m/%Y")
        colg1, colg2 = st.columns([1,1])
        cantidad = colg1.number_input("üë• ¬øCu√°ntos contactos vas a cargar?", min_value=1, max_value=20, value=3)
        agendar = colg2.radio("üìÖ ¬øAgendar pr√≥ximo contacto para todos?", ["No", "S√≠"], index=0, key="mm2_agendar")
        proximo_global = ""
        if agendar == "S√≠":
            proximo_global = st.date_input("üóìÔ∏è Fecha del pr√≥ximo contacto (opcional)", format="YYYY/MM/DD", key="mm2_prox").strftime("%d/%m/%Y")

        motivos_base = [
            "Seguimiento general",
            "Propuesta enviada",
            "Reuni√≥n coordinada",
            "Rotaci√≥n de cartera",
            "Documentaci√≥n",
            "Cobranza",
            "Otro",
        ]
        tipos = ["LLAMADA", "MENSAJES", "REUNION", "OTRO"]
        estados = ["En curso", "Hecho", "REUNION", "Respuesta positiva"]

        with st.form("form_multiple_menus", clear_on_submit=True):
            filas = []
            for i in range(int(cantidad)):
                st.markdown(f"**Contacto #{i+1}**")
                c1, c2, c3 = st.columns([2,1,1])
                q = c1.text_input("üîé Buscar cliente", key=f"mm2_busca_{i}")
                opciones = rankear_coincidencias(q, nombres, top_n=50) if q else nombres
                cliente_sel = c1.selectbox("üë§ Cliente", opciones, key=f"mm2_cliente_{i}")
                tipo_sel = c2.selectbox("üìû Tipo", tipos, key=f"mm2_tipo_{i}")
                estado_sel = c3.selectbox("üìå Estado", estados, key=f"mm2_estado_{i}")

                c4, c5 = st.columns([1,2])
                motivo_sel = c4.selectbox("üìù Motivo", motivos_base, key=f"mm2_motivo_{i}")
                motivo_txt = c5.text_input("Detalle (si eleg√≠s 'Otro' o quer√©s ampliar)", key=f"mm2_motivo_txt_{i}")
                nota_txt = st.text_input("üóíÔ∏è Nota (opcional)", key=f"mm2_nota_{i}")
                st.divider()

                filas.append({
                    "cliente": cliente_sel,
                    "tipo": tipo_sel,
                    "estado": estado_sel,
                    "motivo": motivo_sel,
                    "motivo_txt": motivo_txt,
                    "nota": nota_txt,
                })

            submitted_multi = st.form_submit_button("üìå Cargar todos", use_container_width=True)

        if submitted_multi:
            exitosos, fallidos = 0, []
            for idx, row in enumerate(filas, start=1):
                try:
                    motivo_final = row["motivo_txt"].strip() if row["motivo"] == "Otro" and row["motivo_txt"].strip() else row["motivo"]
                    frase = f"Se realiz√≥ una {row['tipo'].lower()} con {row['cliente']} el {hoy_str} por {motivo_final.lower()}"
                    registrar_contacto(
                        frase,
                        row["estado"],
                        row["nota"],
                        proximo_global,
                        df_clientes,
                        procesar_contacto,
                        row["tipo"],
                    )
                    exitosos += 1
                except Exception as e:
                    fallidos.append(f"Fila {idx}: {e}")
            st.success(f"‚úÖ {exitosos} contactos cargados.")
            if fallidos:
                st.warning("‚ö†Ô∏è Revisar filas con error:")
                for f in fallidos:
                    st.text(f"- {f}")
            st.cache_data.clear()
            st.rerun()

    st.subheader("üì• Descargar historial completo")
    dfc = cargar_historial_completo()
    dfout = formatear_historial_exportable(dfc)
    st.download_button(
        label="‚¨áÔ∏è Descargar historial",
        data=dfout.to_csv(index=False).encode("utf-8"),
        file_name="historial_contactos.csv",
        mime="text/csv",
        key="descarga_historial",
    )

with tabs[1]:
    st.title("üìÖ Recordatorios Pendientes")
    codigo = codigo_asesor_from_email(st.session_state.mail_ingresado)
    try:
        recs = obtener_recordatorios_pendientes(codigo)
    except ValueError as e:
        st.info(f"‚ÑπÔ∏è No se encontr√≥ hoja asignada para tu c√≥digo **{codigo}**. Avis√° al admin o ajust√° el mapeo en el c√≥digo.")
        recs = []
    except Exception as e:
        st.error(f"‚ö†Ô∏è No se pudieron cargar recordatorios: {e}")
        recs = []

    if recs:
        st.subheader("üì£ Contactos a seguir")
        for i, (cliente, asesor, fecha, det, tp) in enumerate(recs):
            icon = "üî¥" if tp == "vencido" else "üü°"
            cols = st.columns([6, 1], gap="small")
            cols[0].markdown(f"{icon} **{cliente}** ‚Äì fecha: **{fecha}**. Motivo: {det or '-'} (Asesor: {asesor})")
            if cols[1].button("‚úîÔ∏è Hecho", key=f"recordatorio_hecho_{i}"):
                try:
                    marcar_contacto_como_hecho(cliente, asesor)
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ö†Ô∏è {e}")
    else:
        st.success("üéâ No hay pendientes. Buen trabajo.")






